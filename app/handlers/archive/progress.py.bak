from __future__ import annotations

from aiogram import F, types
from aiogram.filters import Command
from sqlalchemy.orm import Session

from app.database import SessionLocal
from app.models.user import User
from app.services.i18n import t, T
from app.models.sleep_log import SleepLog
from app.services.progress import get_progress_stats
from .start import router


def get_lang(user_id: int) -> str:
    db: Session = SessionLocal()
    u = db.query(User).filter(User.tg_id == user_id).first()
    lang = u.language if u and u.language else "ru"
    db.close()
    return lang


PROGRESS_BTNS = {T[x]["btn_progress"] for x in T.keys()}


def _back_menu_kb(lang: str) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="p:menu")]
    ])


@router.message(Command("progress"))
@router.message(F.text.in_(PROGRESS_BTNS))
async def show_progress(message: types.Message):
    lang = get_lang(message.from_user.id)
    stats = get_progress_stats(message.from_user.id)
    total = stats["total"]
    by_group = "\n".join([f"- {g}: {c}" for g, c in stats["by_group"]]) or t(lang, "none")
    last7 = "\n".join([f"{d}: {c}" for d, c in stats["last7"]]) or t(lang, "none")
    text = (
        f"{t(lang, 'progress_title')}\n\n"
        f"{t(lang, 'progress_total')}: {total}\n\n"
        f"{t(lang, 'progress_by_group')}:\n{by_group}\n\n"
        f"{t(lang, 'progress_last7')}:\n{last7}"
    )
    await message.answer(text, reply_markup=_back_menu_kb(lang))

    # Sleep stats summary (last 30 logs)
    with SessionLocal() as session:
        user = session.query(User).filter(User.tg_id == message.from_user.id).first()
        if user:
            logs = (
                session.query(SleepLog)
                .filter(SleepLog.user_id == user.id)
                .order_by(SleepLog.id.desc())
                .limit(30)
                .all()
            )
            if logs:
                avg = round(sum(l.duration_hours for l in logs) / len(logs), 2)
                optimal = sum(1 for l in logs if l.evaluation == "optimal")
                pct = round(100 * optimal / len(logs))
                dev = len(logs) - optimal
                await message.answer(
                    t(lang, "sleep_stats_title")
                    + f"\n" + t(lang, "sleep_stats_avg", hours=avg)
                    + f"\n" + t(lang, "sleep_stats_optimal_pct", pct=pct)
                    + f"\n" + t(lang, "sleep_stats_deviation", dev=dev)
                )


@router.callback_query(F.data == "p:menu")
async def back_to_menu(call: types.CallbackQuery):
    lang = get_lang(call.from_user.id)
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=t(lang, "btn_workouts")),
             types.KeyboardButton(text=t(lang, "btn_meals"))],
            [types.KeyboardButton(text=t(lang, "btn_progress")),
             types.KeyboardButton(text=t(lang, "btn_settings"))],
        ],
        resize_keyboard=True
    )
    await call.message.answer(t(lang, "menu_welcome"), reply_markup=kb)
    await call.answer()



